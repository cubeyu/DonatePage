const gulp = require('gulp');
const sass = require('gulp-sass')(require('sass'));
const cleanCSS = require('gulp-clean-css');
const uglify = require('gulp-uglify');
const concat = require('gulp-concat');
const htmlmin = require('gulp-htmlmin');
const terser = require('gulp-terser');
const rename = require('gulp-rename');
const htmlreplace = require('gulp-html-replace');

// 编译 SASS 文件
gulp.task('styles', () => {
  return gulp.src('src/scss/**/*.scss')
    .pipe(sass().on('error', sass.logError))
    .pipe(cleanCSS())
    .pipe(gulp.dest('dist/css'));
});

// 压缩 JavaScript 文件
gulp.task('scripts', () => {
  return gulp.src('src/js/**/*.js')
    .pipe(uglify())
    .pipe(concat('main.min.js'))
    .pipe(gulp.dest('dist/js'));
});

// 压缩 HTML 文件
gulp.task('html', () => {
  return gulp.src('src/**/*.html')
    .pipe(htmlmin({ collapseWhitespace: true }))
    .pipe(gulp.dest('dist'));
});

// 复制静态资源
gulp.task('assets', () => {
  return gulp.src(['src/images/**/*', 'src/fonts/**/*'], { base: 'src' })
    .pipe(gulp.dest('dist'));
});

gulp.task('pack-css', function () {
  // Start the stream from the source files
  return gulp.src([
      './assets/styles/spectre.css/spectre-modified.css',
      './assets/styles/style.css'
  ])
  .pipe(concat('style.main.css'))
  .pipe(cleanCSS({
      level: 2
  }))
  .pipe(gulp.dest('./assets/bundles/'));
});

gulp.task('pack-js', function () {
  return gulp.src([
      './assets/js/iconfont.js',
      './node_modules/jquery/dist/jquery.js',
      './assets/js/jquery-qrcode.js',
      './assets/js/function.js'
  ])
  .pipe(concat('function.main.js'))
  .pipe(terser())
  .pipe(gulp.dest('./assets/bundles/'));
});

gulp.task('minify-html', async function () {
  return gulp.src(['./index.html'], { base: './' })
    .pipe(htmlreplace({
      'css': 'assets/bundles/style.main.css',
      'js': 'assets/bundles/function.main.js'
    }))
    .pipe(htmlmin({
      collapseWhitespace: true,
      conservativeCollapse: true,
      collapseInlineTagWhitespace: true,
      collapseBooleanAttributes: true,
      removeComments: true,
      minifyCSS: true,
      minifyJS: true,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      useShortDoctype: true,
      sortAttributes: true,
      sortClassName: true,
      includeAutoGeneratedTags: false,
    }))
    .pipe(gulp.dest('./'));
});

// gulp.task('temp-copy', function() {
//   return gulp.src('assets/bundles/function.main.js')
//     .pipe(rename('function_main.js'))
//     .pipe(gulp.dest('assets/bundles'))
//     .pipe(gulp.src('assets/bundles/style.main.css'))
//     .pipe(rename('style_main.css'))
//     .pipe(gulp.dest('assets/bundles'));
// });

gulp.task('replace-js-css', function (done) {
  return gulp.src('./index.html')
    .pipe(htmlreplace({
      'css': 'assets/style.main.css',
      'js': 'assets/function.main.js'
    }))
    .pipe(rename('index.html'))
    .pipe(gulp.dest('public/'))
    .on('end', done);
  });

gulp.task('copy-images', function() {
  return gulp.src('./assets/images/**/*')
    .pipe(gulp.dest('./public/assets/images/'));
});

gulp.task('build-html', async function () {
  gulp.start('replace-js-css');
  gulp.start('minify-html');
})

// 添加复制文件到public目录的任务
gulp.task('copy-to-public', async function() {
  // 复制所有HTML文件
  gulp.src('./*.html')
    .pipe(gulp.dest('./public/'));
  
  // 复制assets目录
  gulp.src('./assets/**/*')
    .pipe(gulp.dest('./public/assets/'));
    
  // 复制根目录下可能需要的其他文件
  return gulp.src([
    './LICENSE',
    './README.md',
    './favicon.ico',
    './*.png',
    './*.jpg',
    './*.svg'
  ], { allowEmpty: true })
    .pipe(gulp.dest('./public/'));
});

gulp.task('compile', gulp.series(gulp.parallel('pack-css', 'pack-js')));
gulp.task('default', gulp.series(
  gulp.parallel('pack-js', 'pack-css'), 
  'minify-html',
  'copy-to-public'
));